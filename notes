sigaction structure
struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };

IF SA_SIGINFO is specified in sa_flags,
then sa_sigaction (instead of sa_handler) specifies the signal handling function for signum
this function receives 3 arguments to establish a signal handler
sa_handler only takes 1 argc

sa_flags specifies set of flags which modify the behavior of the signal
It is formed by the bitwise "OR of zero" or by SA_SIGINFO

When SA_SIGINFO flag is specified in act.sa_flags,
signal handler address is passed via act.sa_sigaction
void handler (int sig, siginfo_t *info, void *ucontext)
sig = signum that invocated the handler
info = pointer to siginfo_t, which is a structure containing info about the signal
ucontext = pointer to ucontext_t structure, cast to void *
			= the handler function x make any use of this arg


pause() - suspends program execution until a signal arrives
			- whose action is either to execute a handler function or to terminate the process
			- if signal causes handler function to be executed, then pause returns
exit() - terminate a process or function calling immediately in the program
sleep() - make the program wait for a short interval
kill() - int kill (pid_t pid, int sig)
			- a sys call to send signal to process group or process
			- 
SIGINT - predefined signal to terminate process
signal - Small notifications sent between processes inside the kernel and the userspace
			- aka software interrupts as they usually stop the normal execution of the program
			- and execute the special action for the given signal type
			- The actions are mostly defined as a default across the systems
			- but users can implement a special function and register it as new action for the signal.
signal handling - This process can ignore the signal, specify a handler function, or accept the default action for that signal
sigaction()  - is a system call used to change the action taken by a process on receipt of a specific signal.
				- register signal handlers
				- uses struct sigaction arguments to specify the handler function pointer and other indicators
signal() - signal(int sig, void *function (int))
			- sets a function to handle signal i.e. a signal handler with signal number sig

bit-shifting
loop starts by shifting the first left bit to the end (i = 7)
then compare with & 1 
if it's 1 return 1 , if its 0 return 0
kill signal is sent starting with first left bit to final 8th bit
(following the bits order)

the 8 bits is calculated by the number of 2 powered number of shifts)
num = 2 ^ num of shifts
W : ascii 87 = 64 + 16 + 4 + 2 + 1 
the successful numbers above represents 1 , if not then 0
ex: 2^7 = 128 = 0 | 2^6 = 64 = 1 | 2^5 = 32 = 0
https://www.binaryhexconverter.com/ascii-text-to-binary-converter
decimal numbers is opposite using number equals 1 over (2 power number of shifts)